// Generated by CoffeeScript 1.9.3
(function() {
  var boxHeight, boxof, createDAG, drawDAG, esc, hideText, main, pathof, redraw, reqFile, showText, ygrid;

  esc = function(name) {
    return name.replace(/\//g, '_').replace(/\./g, '_');
  };

  boxof = function(name) {
    return "polygon#" + esc(name);
  };

  pathof = function(from, to) {
    return "path#" + esc(from) + "-" + esc(to);
  };

  ygrid = 28;

  boxHeight = 20;

  main = function() {
    redraw(d3.select("svg#canvas"), dag.nodes, function(name) {});
  };

  showText = function() {
    var canvas;
    $("div.texttitle").show();
    $("div.text").show();
    canvas = $("div.canvas");
    canvas.removeClass("canvasfull");
    canvas.addClass("canvastrim");
  };

  hideText = function() {
    var canvas;
    $("div.texttitle").hide();
    $("div.text").hide();
    canvas = $("div.canvas");
    canvas.removeClass("canvastrim");
    canvas.addClass("canvasfull");
  };

  reqFile = function(pkg, f) {
    var full, req;
    full = pkg + '/<span class="base">' + f + ".go</span>";
    req = $.ajax({
      method: "POST",
      url: "/p/" + pkg + "/" + f + ".go"
    });
    req.done(function(dat) {
      $("div.code").html(dat);
      $("span.curfile").html(full);
      showText();
    });
    req.fail(function(x, status) {
      return alert("failed");
    });
  };

  redraw = function(svg, dag, onclick) {
    var name, node;
    for (name in dag) {
      node = dag[name];
      node.name = name;
      node.y = node.y / 2;
    }
    createDAG(svg, dag, onclick);
    drawDAG(svg, dag);
  };

  $(document).ready(main);

  createDAG = function(svg, dag, onclick) {
    var b, dat, hoverFunc, i, j, k, lab, len, len1, len2, lightIns, lightOuts, node, output, p, path, paths, ref;
    svg.selectAll("*").remove();
    paths = [];
    for (node in dag) {
      dat = dag[node];
      ref = dat.outs;
      for (i = 0, len = ref.length; i < len; i++) {
        output = ref[i];
        paths.push({
          n: esc(node) + "-" + esc(output)
        });
      }
    }
    for (j = 0, len1 = paths.length; j < len1; j++) {
      path = paths[j];
      p = svg.append("path");
      p.attr("d", "");
      p.attr("id", "BG-" + path.n);
      p.attr("class", "bg");
    }
    for (k = 0, len2 = paths.length; k < len2; k++) {
      path = paths[k];
      p = svg.append("path");
      p.attr("d", "");
      p.attr("id", path.n);
      p.attr("class", "dep");
    }
    lightIns = function(name, first) {
      var boxin, depin, input, l, len3, ref1;
      if (first) {
        boxin = "box in";
        depin = "dep in";
      } else {
        boxin = "box in2";
        depin = "dep in2";
      }
      ref1 = dag[name].ins;
      for (l = 0, len3 = ref1.length; l < len3; l++) {
        input = ref1[l];
        svg.select(boxof(input)).attr("class", boxin);
        svg.select(pathof(input, name)).attr("class", depin);
        lightIns(input, false);
      }
    };
    lightOuts = function(name, first) {
      var boxout, depout, l, len3, ref1;
      if (first) {
        boxout = "box out";
        depout = "dep out";
      } else {
        boxout = "box out2";
        depout = "dep out2";
      }
      ref1 = dag[name].outs;
      for (l = 0, len3 = ref1.length; l < len3; l++) {
        output = ref1[l];
        svg.select(boxof(output)).attr("class", boxout);
        svg.select(pathof(name, output)).attr("class", depout);
        lightOuts(output, false);
      }
    };
    hoverFunc = function(name) {
      return function(d) {
        svg.selectAll("polygon").attr("class", "box");
        svg.selectAll("path.dep").attr("class", "dep");
        svg.select(boxof(name)).attr("class", "box focus");
        lightIns(name, true);
        lightOuts(name, true);
      };
    };
    for (node in dag) {
      dat = dag[node];
      b = svg.append("polygon");
      b.attr("class", "box");
      b.attr("id", esc(node));
      lab = svg.append("text");
      lab.attr("class", "lab");
      lab.attr("id", "lab-" + esc(node));
      lab.text(node);
      b.on("mouseover", hoverFunc(dat.name));
      lab.on("click", onclick(dat.name));
      b.on("click", onclick(dat.name));
    }
  };

  drawDAG = function(svg, dag) {
    var b, boxWidth, dat, fromx, fromy, i, j, k, lab, len, len1, len2, n, name, nameMaxLen, node, output, p, path, paths, points, ref, t, toNode, tox, toy, turnx, xgrid, xleft, xmax, xright, ybottom, ymax, ymid, ytop;
    xmax = 0;
    ymax = 0;
    for (name in dag) {
      node = dag[name];
      if (node.x > xmax) {
        xmax = node.x;
      }
      if (node.y > ymax) {
        ymax = node.y;
      }
    }
    nameMaxLen = 0;
    for (name in dag) {
      node = dag[name];
      n = name.length;
      if (n > nameMaxLen) {
        nameMaxLen = n;
      }
    }
    boxWidth = nameMaxLen * 6 + 10;
    console.log(boxWidth);
    if (boxWidth < 50) {
      boxWidth = 50;
    }
    xgrid = boxWidth + 12;
    svg.attr("width", (xmax + 1) * xgrid);
    svg.attr("height", (ymax + 1) * ygrid);
    paths = [];
    for (node in dag) {
      dat = dag[node];
      ref = dat.outs;
      for (i = 0, len = ref.length; i < len; i++) {
        output = ref[i];
        toNode = dag[output];
        fromx = dat.x * xgrid + boxWidth;
        fromy = dat.y * ygrid + boxHeight / 2;
        tox = toNode.x * xgrid;
        toy = toNode.y * ygrid + boxHeight / 2;
        turnx = tox - 6;
        path = "M" + fromx + " " + fromy;
        path += " L" + turnx + " " + fromy;
        path += " L" + turnx + " " + toy;
        path += " L" + tox + " " + toy;
        paths.push({
          p: path,
          n: esc(node) + "-" + esc(output)
        });
      }
    }
    for (j = 0, len1 = paths.length; j < len1; j++) {
      path = paths[j];
      p = svg.select("path#BG-" + path.n);
      p.attr("d", path.p);
    }
    for (k = 0, len2 = paths.length; k < len2; k++) {
      path = paths[k];
      p = svg.select("path#" + path.n);
      p.attr("d", path.p);
    }
    t = 6;
    for (node in dag) {
      dat = dag[node];
      b = svg.select("polygon#" + esc(node));
      xleft = dat.x * xgrid;
      xright = xleft + boxWidth;
      ytop = dat.y * ygrid;
      ybottom = ytop + boxHeight;
      ymid = ytop + boxHeight / 2;
      points = "";
      if (dat.ins.length === 0 && dat.outs.length === 0) {
        points = points + xleft + "," + ytop + " ";
        points = points + xleft + "," + ybottom + " ";
        points = points + xright + "," + ybottom + " ";
        points = points + xright + "," + ytop;
      } else if (dat.ins.length === 0) {
        xright = xright - t / 2;
        points = points + xleft + "," + ytop + " ";
        points = points + xleft + "," + ybottom + " ";
        points = points + xright + "," + ybottom + " ";
        points = points + (xright + t) + "," + ymid + " ";
        points = points + xright + "," + ytop;
      } else if (dat.outs.length === 0) {
        xleft = xleft + t / 2;
        points = points + xleft + "," + ytop + " ";
        points = points + (xleft - t) + "," + ymid + " ";
        points = points + xleft + "," + ybottom + " ";
        points = points + xright + "," + ybottom + " ";
        points = points + xright + "," + ytop;
      } else {
        xleft = xleft + t / 2;
        xright = xright - t / 2;
        points = points + xleft + "," + ytop + " ";
        points = points + (xleft - t) + "," + ymid + " ";
        points = points + xleft + "," + ybottom + " ";
        points = points + xright + "," + ybottom + " ";
        points = points + (xright + t) + "," + ymid + " ";
        points = points + xright + "," + ytop;
      }
      b.attr("points", points);
      lab = svg.select("text#lab-" + esc(node));
      lab.attr("x", dat.x * xgrid + boxWidth / 2);
      lab.attr("y", dat.y * ygrid + boxHeight / 2 + 4);
    }
  };

}).call(this);
